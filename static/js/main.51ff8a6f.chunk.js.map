{"version":3,"sources":["components/checkerboard/checkerboard.js","utilities/nqueen.js","App.js","reportWebVitals.js","index.js"],"names":["CheckerBoard","size","queenPositions","useState","checkerBoard","i","newRow","j","classNames","push","className","join","pos","x","y","_","find","nqueen","n","a","queenPos","col","setQueenPos","console","log","length","parseInt","solved","isSafe","newPos","sleep","res","pop","isUnderAttack","queenPosition","d1","d2","s","Promise","resolve","setTimeout","placeQueens","count","setResult","App","setCount","result","style","padding","color","type","min","max","onChange","v","target","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51ff8a6f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport \"./chessboard.css\";\r\n\r\nexport const CheckerBoard = ({ size, queenPositions = [] }) => {\r\n  const [tempQueen, setTempQueen] = useState({});\r\n  let checkerBoard = [];\r\n  for (let i = 0; i <= size; i++) {\r\n    let newRow = true;\r\n    for (let j = 0; j <= size; j++) {\r\n      let classNames = [\"block\"];\r\n      if (i == 0) {\r\n        classNames.push(\"chessColumnNumber\");\r\n        checkerBoard.push(\r\n          <div className={classNames.join(\" \")}>\r\n            <span className=\"coin\">{j - 1 < 0 ? \"\" : j - 1}</span>\r\n          </div>\r\n        );\r\n        continue;\r\n      }\r\n      if (newRow) {\r\n        classNames.push(\"clearRow\");\r\n        classNames.push(\"chessColumnNumber\");\r\n        newRow = false;\r\n        checkerBoard.push(\r\n          <div className={classNames.join(\" \")}>\r\n            <span className=\"coin\">{i - 1 < 0 ? \"\" : i - 1}</span>\r\n          </div>\r\n        );\r\n        continue;\r\n      }\r\n\r\n      classNames.push(\r\n        (i + j) % 2 === 0 ? \"chessColumnWhite\" : \"chessColumnBlack\"\r\n      );\r\n      const pos = { x: i - 1, y: j - 1 };\r\n      checkerBoard.push(\r\n        <div key={`check-${i}${j}`} className={classNames.join(\" \")}>\r\n          {_.find(queenPositions, pos) ? (\r\n            <span className=\"coin\">&#x2655;</span>\r\n          ) : (\r\n            <span></span>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return checkerBoard;\r\n};\r\n","export const nqueen = async (n, queenPos = [], col, setQueenPos) => {\r\n  console.log(queenPos.length, parseInt(n));\r\n  if (queenPos.length == parseInt(n)) {\r\n    console.log(queenPos);\r\n    return { solved: true, queenPos: queenPos };\r\n  }\r\n  for (let i = 0; i < n; i++) {\r\n    const newPos = { x: col, y: i };\r\n    const safeCheck = isSafe(queenPos, newPos);\r\n    if (safeCheck) {\r\n      queenPos.push(newPos);\r\n      setQueenPos([...queenPos]);\r\n      await sleep(1);\r\n      const res = await nqueen(n, queenPos, col + 1, setQueenPos);\r\n      if (res.solved) {\r\n        return res;\r\n      }\r\n\r\n      queenPos.pop();\r\n      await sleep(0.25);\r\n      setQueenPos([...queenPos]);\r\n    }\r\n  }\r\n  return { solved: false, queenPos: queenPos };\r\n};\r\nconst isSafe = (queenPos = [], newPos = {}) => {\r\n  for (let i = 0; i < queenPos.length; i++) {\r\n    const pos = queenPos[i];\r\n    if (isUnderAttack(newPos, pos)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst isUnderAttack = (newPos, queenPosition) => {\r\n  const d1 = newPos.x - newPos.y;\r\n  const d2 = newPos.x + newPos.y;\r\n  return (\r\n    queenPosition.x == newPos.x ||\r\n    queenPosition.y == newPos.y ||\r\n    queenPosition.x + queenPosition.y == d2 ||\r\n    queenPosition.x - queenPosition.y == d1\r\n  );\r\n};\r\nfunction sleep(s) {\r\n  return new Promise((resolve) => setTimeout(resolve, s * 1000));\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport { CheckerBoard } from \"./components/checkerboard/checkerboard\";\nimport { nqueen } from \"./utilities/nqueen\";\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [result, setResult] = useState(\"\");\n  const [queenPos, setQueenPos] = useState([]);\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-8 chessBoardArea\" style={{ padding: \"3vh\" }}>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <CheckerBoard size={count} queenPositions={queenPos} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div\n              className=\"col-md-12\"\n              style={{ color: \"#eee\", padding: \"4vh\" }}\n            >\n              {result}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-4 chessBoardArea\" style={{ padding: \"3vh\" }}>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <label style={{ color: \"white\" }}>Chess Board Size:</label>\n              <input\n                type=\"number\"\n                min=\"2\"\n                max=\"16\"\n                onChange={(v) => {\n                  console.log(v.target.value);\n                  setCount(v.target.value);\n                }}\n              />\n              <button\n                onClick={() => placeQueens(setQueenPos, count, setResult)}\n              >\n                Place Queens\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nconst placeQueens = async (setQueenPos, count, setResult) => {\n  setResult(\"\");\n  const queenPos = [];\n  const solution = await nqueen(count, queenPos, 0, setQueenPos);\n  if (solution.solved) {\n    setResult(\"Solved! All queens are placed in non attacking positions!\");\n  } else {\n    setResult(\"Cannot find safe positions for all the queens!\");\n  }\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}